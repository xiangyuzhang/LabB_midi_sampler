/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 10.0ms\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 10000000.0;
	SIMULATION_TIME = 10000000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 32000.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk_local")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("rst_n")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("signal")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("flag")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("case3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("correct")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("flag7")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("case1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("case2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clk_local")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 208263.0;
		NODE
		{
			REPEAT = 6;
			NODE
			{
				REPEAT = 9;
				LEVEL 1 FOR 16000.0;
				LEVEL 0 FOR 16000.0;
			}
			LEVEL 1 FOR 15639.0;
			LEVEL 0 FOR 240361.0;
			NODE
			{
				REPEAT = 9;
				LEVEL 1 FOR 16000.0;
				LEVEL 0 FOR 16000.0;
			}
			LEVEL 1 FOR 15639.0;
			LEVEL 0 FOR 144361.0;
			NODE
			{
				REPEAT = 9;
				LEVEL 1 FOR 16000.0;
				LEVEL 0 FOR 16000.0;
			}
			LEVEL 1 FOR 15639.0;
			LEVEL 0 FOR 304361.0;
		}
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 16000.0;
			LEVEL 0 FOR 16000.0;
		}
		LEVEL 1 FOR 16000.0;
		LEVEL 0 FOR 15737.0;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 40000;
			LEVEL 0 FOR 125.0;
			LEVEL 1 FOR 125.0;
		}
	}
}

TRANSITION_LIST("rst_n")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 64000.0;
		LEVEL 1 FOR 9904000.0;
	}
}

TRANSITION_LIST("signal")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 192000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 64000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 352000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 64000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 64000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 160000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 96000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 320000.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 64000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 352000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 64000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 64000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 160000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 32000.0;
			LEVEL 1 FOR 320000.0;
		}
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 64000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 352000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 64000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 64000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 160000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 320000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 64000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 32000.0;
		LEVEL 1 FOR 16000.0;
	}
}

TRANSITION_LIST("flag")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 192011.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 319869.0;
			LEVEL 0 FOR 224131.0;
			LEVEL 1 FOR 319869.0;
			LEVEL 0 FOR 128131.0;
			LEVEL 1 FOR 319869.0;
			LEVEL 0 FOR 288131.0;
		}
		LEVEL 1 FOR 207989.0;
	}
}

TRANSITION_LIST("case3")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("correct")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("flag7")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 464268.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 512000.0;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 416000.0;
			LEVEL 1 FOR 32000.0;
			LEVEL 0 FOR 576000.0;
		}
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 512000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 416000.0;
		LEVEL 1 FOR 32000.0;
		LEVEL 0 FOR 511732.0;
	}
}

TRANSITION_LIST("case1")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 464276.0;
		LEVEL 1 FOR 9535724.0;
	}
}

TRANSITION_LIST("case2")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk_local";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "rst_n";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "flag";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "signal";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
	COMMENT
	{
		TIME = 193075607;
		RISE = 50;
		RUN = 43;
		TEXT = "start";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
	COMMENT
	{
		TIME = 462821650;
		RISE = 66;
		RUN = -70;
		TEXT = "bit7";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
	COMMENT
	{
		TIME = 498315607;
		RISE = 59;
		RUN = -55;
		TEXT = "stop";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
	COMMENT
	{
		TIME = 739660000;
		RISE = 50;
		RUN = 43;
		TEXT = "start";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
	COMMENT
	{
		TIME = 1003726708;
		RISE = 45;
		RUN = -75;
		TEXT = "bit7";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
	COMMENT
	{
		TIME = 1044900000;
		RISE = 59;
		RUN = -55;
		TEXT = "stop";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
	COMMENT
	{
		TIME = 1198225377;
		RISE = 35;
		RUN = -8;
		TEXT = "start";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
	COMMENT
	{
		TIME = 1455190771;
		RISE = 30;
		RUN = -5;
		TEXT = "bit7";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
	COMMENT
	{
		TIME = 1492102928;
		RISE = 47;
		RUN = 3;
		TEXT = "stop";
		FONT_NAME = "Arial";
		FONT_SIZE = 8;
		FONT_STYLE = "Regular";
		FONT_COLOR = 0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "flag7";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "case1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "case2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "case3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "correct";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
